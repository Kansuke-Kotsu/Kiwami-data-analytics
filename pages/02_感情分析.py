import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import pearsonr, spearmanr
import re
import io

st.set_page_config(page_title="‚ë¢ ÊÑüÊÉÖÂàÜÊûê (ÁÑ°Êñô)", page_icon="üíñ", layout="wide")
st.title("üíñ ÊÑüÊÉÖÂàÜÊûê„Å´„Çà„ÇãÂèéÁõäÁõ∏Èñ¢ÂàÜÊûê (ÁÑ°ÊñôÁâà)")

# „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„ÉÅ„Çß„ÉÉ„ÇØ
if "df" not in st.session_state:
    st.warning("„Åæ„Åö„Éà„ÉÉ„Éó„Éö„Éº„Ç∏„ÅßExcel„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
    st.stop()

df = st.session_state["df"].copy()
meta = st.session_state.get("meta", {})

# oseti „É©„Ç§„Éñ„É©„É™„ÅÆÁ¢∫Ë™ç„Å®„Ç§„É≥„Éù„Éº„Éà
try:
    import oseti
    
    # MeCabË®≠ÂÆö„Ç®„É©„Éº„ÅÆ„Éè„É≥„Éâ„É™„É≥„Ç∞
    try:
        analyzer = oseti.Analyzer()
    except RuntimeError as e:
        if "mecabrc" in str(e).lower():
            st.warning("‚ö†Ô∏è MeCab„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ‰ª£ÊõøÊñπÊ≥ï„ÇíË©¶„Åó„Åæ„Åô...")
            
            # Ë§áÊï∞„ÅÆ‰ª£ÊõøË®≠ÂÆö„ÇíË©¶Ë°å
            mecab_configs = [
                "",  # „Éá„Éï„Ç©„É´„Éà
                "-r ''",  # Á©∫„ÅÆrcË®≠ÂÆö
                "-r /dev/null",  # ÁÑ°ÂäπÂåñ
                "-d /usr/local/lib/mecab/dic/mecab-ipadic-neologd",  # ËæûÊõ∏„Éë„ÇπÊåáÂÆö
                "-d /usr/local/lib/mecab/dic/ipadic",  # Ê®ôÊ∫ñËæûÊõ∏
            ]
            
            analyzer = None
            for config in mecab_configs:
                try:
                    if config == "":
                        # MeCab„ÅÆ„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅåÊ≠£„Åó„Åè„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅÆË≠¶Âëä
                        st.info("üîß MeCabË®≠ÂÆö„ÇíËá™ÂãïË™øÊï¥‰∏≠...")
                        analyzer = oseti.Analyzer(mecab_args="-r ''")
                    else:
                        analyzer = oseti.Analyzer(mecab_args=config)
                    st.success("‚úÖ MeCabË®≠ÂÆö„ÅåÊ≠£Â∏∏„Å´ÊßãÊàê„Åï„Çå„Åæ„Åó„ÅüÔºÅ")
                    break
                except:
                    continue
            
            if analyzer is None:
                st.error("üíî MeCab„ÅÆË®≠ÂÆö„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ‰ª•‰∏ã„ÅÆÊâãÈ†Ü„Çí„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑÔºö")
                st.code("""
# macOS„ÅÆÂ†¥Âêà:
brew install mecab mecab-ipadic

# Linux„ÅÆÂ†¥Âêà:
sudo apt-get install mecab mecab-ipadic-utf8

# MeCabËæûÊõ∏„ÅÆÂÜç„Ç§„É≥„Çπ„Éà„Éº„É´:
pip uninstall mecab-python3
pip install mecab-python3
                """)
                st.info("üí° „Åæ„Åü„ÅØ„ÄÅ‰ª£Êõø„Å®„Åó„Å¶ÊÑüÊÉÖÂàÜÊûêLLMÁâà„Çí„ÅîÂà©Áî®„Åè„Å†„Åï„ÅÑ„ÄÇ")
                st.stop()
        else:
            # „Åù„ÅÆ‰ªñ„ÅÆMeCab„Ç®„É©„Éº
            st.error(f"üíî MeCab„Ç®„É©„Éº: {str(e)}")
            st.info("üí° ÊÑüÊÉÖÂàÜÊûêLLMÁâà„ÅÆ„ÅîÂà©Áî®„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„Åô„ÄÇ")
            st.stop()
    
except ImportError:
    st.error("üíî oseti„É©„Ç§„Éñ„É©„É™„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ")
    st.code("pip install oseti")
    st.info("requirements.txt„Å´oseti„ÇíËøΩÂä†„Åó„Å¶ÂÜçËµ∑Âãï„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
    st.stop()
except Exception as e:
    st.error(f"üíî ‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {str(e)}")
    st.info("üí° ÊÑüÊÉÖÂàÜÊûêLLMÁâà„ÅÆ„ÅîÂà©Áî®„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„Åô„ÄÇ")
    st.stop()

# ÂàóÈÅ∏Êäû
st.subheader("üìã „Éá„Éº„ÇøÂàóÈÅ∏Êäû")
col1, col2 = st.columns(2)

with col1:
    script_col = st.selectbox(
        "Âè∞Êú¨„Éá„Éº„ÇøÂàó",
        options=list(df.columns),
        index=list(df.columns).index(meta.get("text_col")) if meta.get("text_col") in df.columns else 0
    )

with col2:
    revenue_options = [c for c in df.columns if c != script_col]
    default_idx = revenue_options.index(meta.get("profit_col")) if meta.get("profit_col") in revenue_options else 0
    revenue_col = st.selectbox(
        "ÂèéÁõä„Éá„Éº„ÇøÂàó",
        options=revenue_options,
        index=default_idx
    )


# „Éá„Éº„Çø„ÅÆÂâçÂá¶ÁêÜ
df_clean = df.copy()
df_clean[script_col] = df_clean[script_col].fillna("").astype(str)
df_clean[revenue_col] = pd.to_numeric(df_clean[revenue_col], errors="coerce")

# ÊúâÂäπ„Å™„Éá„Éº„Çø„ÅÆ„ÅøÊäΩÂá∫
valid_data = df_clean[
    (df_clean[script_col].str.strip() != "") & 
    (df_clean[revenue_col].notna())
].copy()

if len(valid_data) == 0:
    st.error("ÊúâÂäπ„Å™Âè∞Êú¨„Éá„Éº„Çø„Å®ÂèéÁõä„Éá„Éº„Çø„ÅÆ„Éö„Ç¢„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ")
    st.stop()

st.info(f"üìä ÊúâÂäπ„Éá„Éº„Çø‰ª∂Êï∞: {len(valid_data):,}‰ª∂ / ÂÖ®‰Ωì: {len(df):,}‰ª∂")

# ÂàÜÊûêË®≠ÂÆö
st.subheader("‚öôÔ∏è ÊÑüÊÉÖÂàÜÊûêË®≠ÂÆö")

col1, col2 = st.columns(2)
with col1:
    max_samples = st.slider(
        "ÊúÄÂ§ßÂàÜÊûê‰ª∂Êï∞ÔºàÂá¶ÁêÜÈÄüÂ∫¶Ë™øÊï¥Ôºâ",
        min_value=10,
        max_value=min(2000, len(valid_data)),
        value=min(500, len(valid_data)),
        step=50
    )

with col2:
    text_preprocessing = st.selectbox(
        "„ÉÜ„Ç≠„Çπ„ÉàÂâçÂá¶ÁêÜ",
        ["Âü∫Êú¨ÂâçÂá¶ÁêÜ", "Ë©≥Á¥∞ÂâçÂá¶ÁêÜ"]
    )

# „Çµ„É≥„Éó„É™„É≥„Ç∞
if len(valid_data) > max_samples:
    sample_data = valid_data.sample(n=max_samples, random_state=42)
    st.info(f"üéØ {max_samples}‰ª∂„Çí„É©„É≥„ÉÄ„É†„Çµ„É≥„Éó„É™„É≥„Ç∞„Åó„Åæ„Åó„Åü")
else:
    sample_data = valid_data
    st.info(f"üìã ÂÖ®{len(sample_data)}‰ª∂„ÇíÂàÜÊûê„Åó„Åæ„Åô")

# „ÉÜ„Ç≠„Çπ„ÉàÂâçÂá¶ÁêÜÈñ¢Êï∞
def preprocess_text(text, mode="basic"):
    """„ÉÜ„Ç≠„Çπ„Éà„ÅÆÂâçÂá¶ÁêÜ"""
    if mode == "Ë©≥Á¥∞ÂâçÂá¶ÁêÜ":
        # URL„ÄÅ„É°„Éº„É´„ÄÅÊï∞Â≠ó„ÇíÈô§Âéª
        text = re.sub(r'https?://[\w/:%#\$&\?\(\)~\.=\+\-]+', '', text)
        text = re.sub(r'[\w\.-]+@[\w\.-]+\.\w+', '', text)
        text = re.sub(r'\d+', '', text)
        # Ë®òÂè∑„ÅÆ‰∏ÄÈÉ®„ÇíÈô§Âéª
        text = re.sub(r'[„Äê„Äë„Äå„Äç„Äé„ÄèÔºàÔºâ()[\]{}]', '', text)
        # ÊîπË°å„Å®„Çø„Éñ„ÇíÁ©∫ÁôΩ„Å´
        text = re.sub(r'[\r\n\t]+', ' ', text)
        # ÈÄ£Á∂ö„Åô„ÇãÁ©∫ÁôΩ„Çí1„Å§„Å´
        text = re.sub(r'\s+', ' ', text)
    
    return text.strip()

# ÊÑüÊÉÖÂàÜÊûêÈñ¢Êï∞
def analyze_sentiment_batch(texts, preprocessing_mode="basic"):
    """„Éê„ÉÉ„ÉÅÊÑüÊÉÖÂàÜÊûê"""
    results = []
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for idx, text in enumerate(texts):
        try:
            # „ÉÜ„Ç≠„Çπ„ÉàÂâçÂá¶ÁêÜ
            processed_text = preprocess_text(text, preprocessing_mode)
            
            if len(processed_text.strip()) == 0:
                # Á©∫„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÅÆÂ†¥Âêà„ÅØ„Éã„É•„Éº„Éà„É©„É´„Çπ„Ç≥„Ç¢
                sentiment_scores = {
                    "positive": 0.0,
                    "negative": 0.0, 
                    "neutral": 1.0,
                    "compound": 0.0
                }
            else:
                # oseti „Å´„Çà„ÇãÊÑüÊÉÖÂàÜÊûê
                scores = analyzer.analyze(processed_text)
                # scores „ÅØ listÔºàÂêÑÊñá„ÅÆ„Çπ„Ç≥„Ç¢Ôºâ„Å™„ÅÆ„Åß„ÄÅÂÖ®‰Ωì„ÅÆË§áÂêà„Çπ„Ç≥„Ç¢„ÇíÂπ≥Âùá„ÅßÈõÜÁ¥Ñ
                if isinstance(scores, (list, tuple, np.ndarray)):
                    if len(scores) == 0:
                        compound_score = 0.0
                    else:
                        compound_score = float(np.mean(scores))
                else:
                    # Á®Ä„Å´Âçò‰∏ÄÊï∞ÂÄ§„ÅåËøî„Å£„Å¶„Åç„Å¶„ÇÇÂÆâÂÖ®„Å´Âá¶ÁêÜ
                    compound_score = float(scores)

                # compound_score „ÅØ -1„Äú1 „ÇíÂèñ„Çä„ÅÜ„ÇãÊÉ≥ÂÆö
                # „Ç∑„É≥„Éó„É´„Å´„ÄåÊ≠£ÔºèË≤†Ôºè‰∏≠Á´ã„Äç„ÇíÂâ≤„ÇäÂΩì„Å¶ÔºàÂêàË®à„Åå1„Å´„Å™„Çã„Çà„ÅÜ„Å´Ôºâ
                if compound_score > 0.1:
                    positive = compound_score          # ‰æã: 0.7 ‚Üí positive=0.7, neutral=0.3
                    negative = 0.0
                    neutral  = 1.0 - positive
                elif compound_score < -0.1:
                    positive = 0.0
                    negative = -compound_score         # ‰æã: -0.6 ‚Üí negative=0.6, neutral=0.4
                    neutral  = 1.0 - negative
                else:
                    positive = 0.0
                    negative = 0.0
                    neutral  = 1.0

                sentiment_scores = {
                    "positive": positive,
                    "negative": negative,
                    "neutral": neutral,
                    "compound": compound_score
                }
            
            results.append(sentiment_scores)
            
            # „Éó„É≠„Ç∞„É¨„ÇπÊõ¥Êñ∞
            progress = (idx + 1) / len(texts)
            progress_bar.progress(progress)
            status_text.text(f"ÂàÜÊûê‰∏≠... {idx+1}/{len(texts)} ({progress*100:.1f}%)")
            
        except Exception as e:
            # „Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅØ„Éã„É•„Éº„Éà„É©„É´„Çπ„Ç≥„Ç¢
            st.warning(f"„ÉÜ„Ç≠„Çπ„Éà{idx+1}„ÅÆÂàÜÊûê„Åß„Ç®„É©„Éº: {e}")
            results.append({
                "positive": 0.0,
                "negative": 0.0,
                "neutral": 1.0,
                "compound": 0.0
            })
            continue
    
    status_text.text("‚úÖ ÊÑüÊÉÖÂàÜÊûêÂÆå‰∫ÜÔºÅ")
    progress_bar.progress(1.0)
    
    return results

# ÊÑüÊÉÖÂàÜÊûêÂÆüË°å
if st.button("üöÄ ÊÑüÊÉÖÂàÜÊûêÂÆüË°å", type="primary"):
    
    st.info("üíñ oseti„É©„Ç§„Éñ„É©„É™„Å´„Çà„ÇãÊÑüÊÉÖÂàÜÊûê„ÇíÈñãÂßã„Åó„Åæ„ÅôÔºàÂÆåÂÖ®ÁÑ°ÊñôÔºâ")
    
    # „ÉÜ„Ç≠„Çπ„Éà„É™„Çπ„ÉàÊ∫ñÂÇô
    texts = sample_data[script_col].astype(str).tolist()
    
    # „Éê„ÉÉ„ÉÅÊÑüÊÉÖÂàÜÊûêÂÆüË°å
    sentiment_results = analyze_sentiment_batch(texts, text_preprocessing)
    
    # ÁµêÊûú„ÇíDataFrame„Å´ÁµêÂêà
    results_df = pd.DataFrame(sentiment_results)
    results_df["revenue"] = sample_data[revenue_col].values
    results_df["text_sample"] = [text[:100] + "..." for text in texts]
    
    # ÊÑüÊÉÖÂà§ÂÆöÔºà„Éù„Ç∏„ÉÜ„Ç£„Éñ/„Éç„Ç¨„ÉÜ„Ç£„ÉñÔºâ„ÅÆËøΩÂä†
    results_df["sentiment_label"] = results_df["compound"].apply(
        lambda x: "„Éù„Ç∏„ÉÜ„Ç£„Éñ" if x > 0.1 else "„Éç„Ç¨„ÉÜ„Ç£„Éñ" if x < -0.1 else "‰∏≠ÊÄß"
    )
    
    st.success(f"üéâ {len(results_df)}‰ª∂„ÅÆÊÑüÊÉÖÂàÜÊûê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ")
    
    # ÂêÑÂè∞Êú¨„Éá„Éº„Çø„ÅÆÊÑüÊÉÖÂà§ÂÆö‰∏ÄË¶ßË°®Á§∫
    st.subheader("üìã ÂêÑÂè∞Êú¨„Éá„Éº„Çø„ÅÆÊÑüÊÉÖÂà§ÂÆö‰∏ÄË¶ß")
    
    # ÊÑüÊÉÖÂà§ÂÆöÁµêÊûú„ÅÆ„Çµ„Éû„É™„Éº
    sentiment_counts = results_df["sentiment_label"].value_counts()
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("„Éù„Ç∏„ÉÜ„Ç£„Éñ", f"{sentiment_counts.get('„Éù„Ç∏„ÉÜ„Ç£„Éñ', 0)}‰ª∂", 
                 f"{sentiment_counts.get('„Éù„Ç∏„ÉÜ„Ç£„Éñ', 0) / len(results_df) * 100:.1f}%")
    with col2:
        st.metric("„Éç„Ç¨„ÉÜ„Ç£„Éñ", f"{sentiment_counts.get('„Éç„Ç¨„ÉÜ„Ç£„Éñ', 0)}‰ª∂",
                 f"{sentiment_counts.get('„Éç„Ç¨„ÉÜ„Ç£„Éñ', 0) / len(results_df) * 100:.1f}%")
    with col3:
        st.metric("‰∏≠ÊÄß", f"{sentiment_counts.get('‰∏≠ÊÄß', 0)}‰ª∂",
                 f"{sentiment_counts.get('‰∏≠ÊÄß', 0) / len(results_df) * 100:.1f}%")
    
    # Âè∞Êú¨„Éá„Éº„Çø„Å®ÊÑüÊÉÖÂà§ÂÆöÁµêÊûú„ÅÆ‰∏ÄË¶ßË°®
    display_df = pd.DataFrame({
        "Áï™Âè∑": range(1, len(results_df) + 1),
        "Âè∞Êú¨„Éá„Éº„ÇøÔºàÊäúÁ≤ãÔºâ": results_df["text_sample"],
        "ÊÑüÊÉÖÂà§ÂÆö": results_df["sentiment_label"],
        "Á∑èÂêà„Çπ„Ç≥„Ç¢": results_df["compound"].round(3),
        "„Éù„Ç∏„ÉÜ„Ç£„Éñ": results_df["positive"].round(3),
        "„Éç„Ç¨„ÉÜ„Ç£„Éñ": results_df["negative"].round(3),
        "ÂèéÁõä": results_df["revenue"]
    })
    
    # ÊÑüÊÉÖÂà•„ÅÆËâ≤ÂàÜ„Åë„ÇíÈÅ©Áî®
    def highlight_sentiment(row):
        if row["ÊÑüÊÉÖÂà§ÂÆö"] == "„Éù„Ç∏„ÉÜ„Ç£„Éñ":
            return ['background-color: #e6ffe6'] * len(row)
        elif row["ÊÑüÊÉÖÂà§ÂÆö"] == "„Éç„Ç¨„ÉÜ„Ç£„Éñ":
            return ['background-color: #ffe6e6'] * len(row)
        else:
            return ['background-color: #f5f5f5'] * len(row)
    
    st.dataframe(
        display_df.style.apply(highlight_sentiment, axis=1),
        use_container_width=True,
        height=400
    )
    
    # „Éï„Ç£„É´„Çø„É™„É≥„Ç∞Ê©üËÉΩ
    st.subheader("üîç ÊÑüÊÉÖÂà•„Éï„Ç£„É´„Çø„É™„É≥„Ç∞")
    
    filter_emotion = st.selectbox(
        "Ë°®Á§∫„Åô„ÇãÊÑüÊÉÖ„ÇíÈÅ∏Êäû:",
        options=["ÂÖ®„Å¶"] + list(sentiment_counts.index)
    )
    
    if filter_emotion != "ÂÖ®„Å¶":
        filtered_df = display_df[display_df["ÊÑüÊÉÖÂà§ÂÆö"] == filter_emotion]
        st.write(f"**{filter_emotion}„ÅÆÂè∞Êú¨„Éá„Éº„Çø ({len(filtered_df)}‰ª∂):**")
        st.dataframe(
            filtered_df.style.apply(highlight_sentiment, axis=1),
            use_container_width=True,
            height=300
        )
        
        # „Éï„Ç£„É´„Çø„É™„É≥„Ç∞ÁµêÊûú„ÅÆÁµ±Ë®à
        if len(filtered_df) > 0:
            avg_revenue = filtered_df["ÂèéÁõä"].mean()
            avg_score = filtered_df["Á∑èÂêà„Çπ„Ç≥„Ç¢"].mean()
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric(f"{filter_emotion}„ÅÆÂπ≥ÂùáÂèéÁõä", f"{avg_revenue:.2f}")
            with col2:
                st.metric(f"{filter_emotion}„ÅÆÂπ≥ÂùáÊÑüÊÉÖ„Çπ„Ç≥„Ç¢", f"{avg_score:.3f}")
    
    # Âü∫Êú¨Áµ±Ë®àË°®Á§∫
    st.subheader("üìä ÊÑüÊÉÖ„Çπ„Ç≥„Ç¢Âü∫Êú¨Áµ±Ë®à")
    
    emotion_stats = results_df[["positive", "negative", "neutral", "compound"]].describe()
    st.dataframe(emotion_stats.round(3))
    
    # Áõ∏Èñ¢ÂàÜÊûê
    st.subheader("üìà ÊÑüÊÉÖ-ÂèéÁõäÁõ∏Èñ¢ÂàÜÊûê")
    
    emotion_cols = ["positive", "negative", "neutral", "compound"]
    correlation_results = []
    
    for emotion in emotion_cols:
        # „Éá„Éº„Çø„ÅÆÊúâÂäπÊÄß„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        emotion_data = results_df[emotion].values
        revenue_data = results_df["revenue"].values
        
        # ÂÆöÊï∞ÈÖçÂàó„ÇÑNaNÂÄ§„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        if (np.std(emotion_data) == 0 or np.std(revenue_data) == 0 or 
            np.isnan(emotion_data).all() or np.isnan(revenue_data).all()):
            # ÂÆöÊï∞ÈÖçÂàó„ÅÆÂ†¥Âêà„ÅØÁõ∏Èñ¢‰øÇÊï∞„Çí0„Å®„Åô„Çã
            pearson_corr, pearson_p = 0.0, 1.0
            spearman_corr, spearman_p = 0.0, 1.0
        else:
            try:
                # „Éî„Ç¢„ÇΩ„É≥Áõ∏Èñ¢
                pearson_corr, pearson_p = pearsonr(emotion_data, revenue_data)
                # „Çπ„Éî„Ç¢„Éû„É≥Áõ∏Èñ¢  
                spearman_corr, spearman_p = spearmanr(emotion_data, revenue_data)
                
                # NaNÂÄ§„ÅÆÂá¶ÁêÜ
                if np.isnan(pearson_corr):
                    pearson_corr, pearson_p = 0.0, 1.0
                if np.isnan(spearman_corr):
                    spearman_corr, spearman_p = 0.0, 1.0
                    
            except Exception as e:
                st.warning(f"Áõ∏Èñ¢Ë®àÁÆó„Ç®„É©„Éº ({emotion}): {str(e)}")
                pearson_corr, pearson_p = 0.0, 1.0
                spearman_corr, spearman_p = 0.0, 1.0
        
        emotion_names = {
            "positive": "„Éù„Ç∏„ÉÜ„Ç£„Éñ",
            "negative": "„Éç„Ç¨„ÉÜ„Ç£„Éñ", 
            "neutral": "‰∏≠ÊÄß",
            "compound": "Á∑èÂêàÊÑüÊÉÖ"
        }
        
        correlation_results.append({
            "ÊÑüÊÉÖ": emotion_names[emotion],
            "„Éî„Ç¢„ÇΩ„É≥Áõ∏Èñ¢": pearson_corr,
            "„Éî„Ç¢„ÇΩ„É≥pÂÄ§": pearson_p,
            "„Çπ„Éî„Ç¢„Éû„É≥Áõ∏Èñ¢": spearman_corr,
            "„Çπ„Éî„Ç¢„Éû„É≥pÂÄ§": spearman_p,
            "Áµ±Ë®àÁöÑÊúâÊÑèÊÄß": "ÊúâÊÑè" if pearson_p < 0.05 else "ÈùûÊúâÊÑè"
        })
    
    corr_df = pd.DataFrame(correlation_results).sort_values("„Éî„Ç¢„ÇΩ„É≥Áõ∏Èñ¢", key=abs, ascending=False)
    
    # Áõ∏Èñ¢ÁµêÊûúË°®Á§∫
    st.dataframe(
        corr_df.style.format({
            "„Éî„Ç¢„ÇΩ„É≥Áõ∏Èñ¢": "{:.3f}",
            "„Éî„Ç¢„ÇΩ„É≥pÂÄ§": "{:.3f}",
            "„Çπ„Éî„Ç¢„Éû„É≥Áõ∏Èñ¢": "{:.3f}",
            "„Çπ„Éî„Ç¢„Éû„É≥pÂÄ§": "{:.3f}"
        }),
        use_container_width=True
    )
    
    # ÂèØË¶ñÂåñ
    st.subheader("üìä Áõ∏Èñ¢ÂèØË¶ñÂåñ")
    
    # Áõ∏Èñ¢„Éê„Éº„Éó„É≠„ÉÉ„Éà
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # „Éî„Ç¢„ÇΩ„É≥Áõ∏Èñ¢
    bars1 = ax1.barh(corr_df["ÊÑüÊÉÖ"], corr_df["„Éî„Ç¢„ÇΩ„É≥Áõ∏Èñ¢"])
    ax1.set_xlabel("Áõ∏Èñ¢‰øÇÊï∞")
    ax1.set_title("ÊÑüÊÉÖ-ÂèéÁõä „Éî„Ç¢„ÇΩ„É≥Áõ∏Èñ¢")
    ax1.axvline(0, color="black", linestyle="-", alpha=0.5)
    
    # „Éê„Éº„ÅÆËâ≤‰ªò„Åë
    for bar, corr in zip(bars1, corr_df["„Éî„Ç¢„ÇΩ„É≥Áõ∏Èñ¢"]):
        bar.set_color("red" if corr > 0 else "blue")
        bar.set_alpha(0.7)
    
    # „Çπ„Éî„Ç¢„Éû„É≥Áõ∏Èñ¢
    bars2 = ax2.barh(corr_df["ÊÑüÊÉÖ"], corr_df["„Çπ„Éî„Ç¢„Éû„É≥Áõ∏Èñ¢"])
    ax2.set_xlabel("Áõ∏Èñ¢‰øÇÊï∞")
    ax2.set_title("ÊÑüÊÉÖ-ÂèéÁõä „Çπ„Éî„Ç¢„Éû„É≥Áõ∏Èñ¢")
    ax2.axvline(0, color="black", linestyle="-", alpha=0.5)
    
    # „Éê„Éº„ÅÆËâ≤‰ªò„Åë
    for bar, corr in zip(bars2, corr_df["„Çπ„Éî„Ç¢„Éû„É≥Áõ∏Èñ¢"]):
        bar.set_color("red" if corr > 0 else "blue")
        bar.set_alpha(0.7)
    
    plt.tight_layout()
    st.pyplot(fig)
    
    # ÊÑüÊÉÖ„Çπ„Ç≥„Ç¢ÂàÜÂ∏É
    st.subheader("üìä ÊÑüÊÉÖ„Çπ„Ç≥„Ç¢ÂàÜÂ∏É")
    
    emotion_means = results_df[["positive", "negative", "neutral", "compound"]].mean()
    emotion_names_jp = ["„Éù„Ç∏„ÉÜ„Ç£„Éñ", "„Éç„Ç¨„ÉÜ„Ç£„Éñ", "‰∏≠ÊÄß", "Á∑èÂêàÊÑüÊÉÖ"]
    
    fig, ax = plt.subplots(figsize=(12, 6))
    bars = ax.bar(emotion_names_jp, emotion_means.values)
    ax.set_ylabel("Âπ≥Âùá„Çπ„Ç≥„Ç¢")
    ax.set_title("ÊÑüÊÉÖÂà•Âπ≥Âùá„Çπ„Ç≥„Ç¢")
    ax.set_ylim(0, 1)
    
    # „Éê„Éº„ÅÆËâ≤„ÇíÁõ∏Èñ¢„ÅÆÂº∑„Åï„ÅßËâ≤ÂàÜ„Åë
    colors = ['red' if corr_df.iloc[i]["„Éî„Ç¢„ÇΩ„É≥Áõ∏Èñ¢"] > 0 else 'blue' 
              for i in range(len(emotion_means))]
    for bar, color in zip(bars, colors):
        bar.set_color(color)
        bar.set_alpha(0.7)
    
    plt.tight_layout()
    st.pyplot(fig)
    
    # ÊúÄÈ´òÁõ∏Èñ¢ÊÑüÊÉÖ„ÅÆÊï£Â∏ÉÂõ≥
    if len(corr_df) > 0:
        best_emotion_jp = corr_df.iloc[0]["ÊÑüÊÉÖ"]
        
        # ÊÑüÊÉÖÂêç„Åã„ÇâËã±Ë™û„Ç´„É©„É†Âêç„Å∏„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞
        emotion_name_mapping = {
            "„Éù„Ç∏„ÉÜ„Ç£„Éñ": "positive",
            "„Éç„Ç¨„ÉÜ„Ç£„Éñ": "negative", 
            "‰∏≠ÊÄß": "neutral",
            "Á∑èÂêàÊÑüÊÉÖ": "compound"
        }
        best_emotion_col = emotion_name_mapping[best_emotion_jp]
        best_corr = corr_df.iloc[0]["„Éî„Ç¢„ÇΩ„É≥Áõ∏Èñ¢"]
        
        st.subheader(f"üéØ ÊúÄÈ´òÁõ∏Èñ¢ÊÑüÊÉÖ: {best_emotion_jp} (r={best_corr:.3f})")
        
        fig, ax = plt.subplots(figsize=(10, 6))
        scatter = ax.scatter(results_df[best_emotion_col], results_df["revenue"], 
                           alpha=0.6, c=results_df[best_emotion_col], cmap="viridis")
        ax.set_xlabel(f"{best_emotion_jp}„Çπ„Ç≥„Ç¢")
        ax.set_ylabel("ÂèéÁõä")
        ax.set_title(f"{best_emotion_jp}„Çπ„Ç≥„Ç¢ vs ÂèéÁõä")
        
        # „Éà„É¨„É≥„Éâ„É©„Ç§„É≥Ôºà„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞‰ªò„ÅçÔºâ
        try:
            x_data = results_df[best_emotion_col].values
            y_data = results_df["revenue"].values
            
            # „Éá„Éº„Çø„ÅÆÊúâÂäπÊÄß„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            if (np.std(x_data) > 1e-10 and np.std(y_data) > 1e-10 and 
                not np.isnan(x_data).any() and not np.isnan(y_data).any() and 
                len(x_data) > 1):
                
                z = np.polyfit(x_data, y_data, 1)
                p = np.poly1d(z)
                ax.plot(x_data, p(x_data), "r--", alpha=0.8, linewidth=2)
            else:
                st.info(f"üìù {best_emotion_jp}„Éá„Éº„Çø„Å´‰∏ÄÂÆöÂÄ§„ÅåÂ§ö„ÅÑ„Åü„ÇÅ„ÄÅ„Éà„É¨„É≥„Éâ„É©„Ç§„É≥„ÇíÁúÅÁï•„Åó„Åæ„Åô„ÄÇ")
                
        except Exception as e:
            st.warning(f"„Éà„É¨„É≥„Éâ„É©„Ç§„É≥ÊèèÁîª„Ç®„É©„Éº: {str(e)}")
            st.info("üí° „Éá„Éº„Çø„Å´Êï∞ÂÄ§ÁöÑ„Å™ÂïèÈ°å„Åå„ÅÇ„Çã„Åü„ÇÅ„ÄÅ„Éà„É¨„É≥„Éâ„É©„Ç§„É≥„Å™„Åó„ÅßË°®Á§∫„Åó„Åæ„Åô„ÄÇ")
        
        plt.colorbar(scatter, label=f"{best_emotion_jp}„Çπ„Ç≥„Ç¢")
        plt.tight_layout()
        st.pyplot(fig)
    
    # ÊÑüÊÉÖÂàÜÂ∏É„ÅÆ„Éí„Éº„Éà„Éû„ÉÉ„Éó
    st.subheader("üå°Ô∏è ÊÑüÊÉÖ„Çπ„Ç≥„Ç¢Áõ∏Èñ¢„Éû„Éà„É™„ÉÉ„ÇØ„Çπ")
    
    emotion_corr = results_df[["positive", "negative", "neutral", "compound", "revenue"]].corr()
    emotion_corr.columns = ["„Éù„Ç∏„ÉÜ„Ç£„Éñ", "„Éç„Ç¨„ÉÜ„Ç£„Éñ", "‰∏≠ÊÄß", "Á∑èÂêàÊÑüÊÉÖ", "ÂèéÁõä"]
    emotion_corr.index = ["„Éù„Ç∏„ÉÜ„Ç£„Éñ", "„Éç„Ç¨„ÉÜ„Ç£„Éñ", "‰∏≠ÊÄß", "Á∑èÂêàÊÑüÊÉÖ", "ÂèéÁõä"]
    
    fig, ax = plt.subplots(figsize=(8, 6))
    sns.heatmap(emotion_corr, annot=True, cmap="coolwarm", center=0, 
                square=True, fmt=".3f", ax=ax)
    ax.set_title("ÊÑüÊÉÖ„Çπ„Ç≥„Ç¢Áõ∏Èñ¢„Éû„Éà„É™„ÉÉ„ÇØ„Çπ")
    plt.tight_layout()
    st.pyplot(fig)
    
    # ÁµêÊûúË¶ÅÁ¥Ñ
    st.subheader("üìã ÂàÜÊûêÁµêÊûúË¶ÅÁ¥Ñ")
    
    significant_emotions = corr_df[corr_df["Áµ±Ë®àÁöÑÊúâÊÑèÊÄß"] == "ÊúâÊÑè"]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("ÂàÜÊûê‰ª∂Êï∞", f"{len(results_df):,}‰ª∂")
        st.metric("ÊúâÊÑè„Å™Áõ∏Èñ¢Êï∞", f"{len(significant_emotions)}ÂÄã")
        
    with col2:
        strongest_corr = corr_df.iloc[0]
        st.metric("ÊúÄÂº∑Áõ∏Èñ¢", f"{strongest_corr['ÊÑüÊÉÖ']}")
        st.metric("Áõ∏Èñ¢‰øÇÊï∞", f"{strongest_corr['„Éî„Ç¢„ÇΩ„É≥Áõ∏Èñ¢']:.3f}")
    
    if len(significant_emotions) > 0:
        st.success(f"‚úÖ {len(significant_emotions)}ÂÄã„ÅÆÊÑüÊÉÖ„ÅßÁµ±Ë®àÁöÑ„Å´ÊúâÊÑè„Å™Áõ∏Èñ¢„ÇíÁô∫Ë¶ã")
        
        for _, row in significant_emotions.iterrows():
            correlation_strength = "Âº∑„ÅÑ" if abs(row["„Éî„Ç¢„ÇΩ„É≥Áõ∏Èñ¢"]) > 0.5 else "‰∏≠Á®ãÂ∫¶" if abs(row["„Éî„Ç¢„ÇΩ„É≥Áõ∏Èñ¢"]) > 0.3 else "Âº±„ÅÑ"
            correlation_direction = "Ê≠£„ÅÆ" if row["„Éî„Ç¢„ÇΩ„É≥Áõ∏Èñ¢"] > 0 else "Ë≤†„ÅÆ"
            
            st.write(f"‚Ä¢ **{row['ÊÑüÊÉÖ']}**: {correlation_direction}{correlation_strength}Áõ∏Èñ¢ (r={row['„Éî„Ç¢„ÇΩ„É≥Áõ∏Èñ¢']:.3f}, p={row['„Éî„Ç¢„ÇΩ„É≥pÂÄ§']:.3f})")
    else:
        st.warning("‚ö†Ô∏è Áµ±Ë®àÁöÑ„Å´ÊúâÊÑè„Å™Áõ∏Èñ¢„ÅØË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
    
    # ÊÑüÊÉÖÂà•ÂèéÁõäÂàÜÊûê
    st.subheader("üí∞ ÊÑüÊÉÖÂà•ÂèéÁõäÂàÜÊûê")
    
    # Á∑èÂêàÊÑüÊÉÖ„Çπ„Ç≥„Ç¢„Åß‰∏ä‰Ωç„Éª‰∏ã‰Ωç„ÇíÂàÜÈ°û
    compound_median = results_df["compound"].median()
    
    high_sentiment = results_df[results_df["compound"] >= compound_median]
    low_sentiment = results_df[results_df["compound"] < compound_median]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric(
            "È´òÊÑüÊÉÖ„Ç∞„É´„Éº„ÉóÂπ≥ÂùáÂèéÁõä", 
            f"{high_sentiment['revenue'].mean():.2f}",
            f"{high_sentiment['revenue'].mean() - results_df['revenue'].mean():.2f}"
        )
        st.write(f"‰ª∂Êï∞: {len(high_sentiment)}‰ª∂")
        
    with col2:
        st.metric(
            "‰ΩéÊÑüÊÉÖ„Ç∞„É´„Éº„ÉóÂπ≥ÂùáÂèéÁõä",
            f"{low_sentiment['revenue'].mean():.2f}",
            f"{low_sentiment['revenue'].mean() - results_df['revenue'].mean():.2f}"
        )
        st.write(f"‰ª∂Êï∞: {len(low_sentiment)}‰ª∂")
    
    # ÂèéÁõäÂàÜÂ∏ÉÊØîËºÉ
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.hist([high_sentiment["revenue"], low_sentiment["revenue"]], 
            bins=20, alpha=0.7, label=["È´òÊÑüÊÉÖ", "‰ΩéÊÑüÊÉÖ"], color=["red", "blue"])
    ax.set_xlabel("ÂèéÁõä")
    ax.set_ylabel("È†ªÂ∫¶")
    ax.set_title("ÊÑüÊÉÖ„Ç∞„É´„Éº„ÉóÂà•ÂèéÁõäÂàÜÂ∏É")
    ax.legend()
    plt.tight_layout()
    st.pyplot(fig)
    
    # CSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
    st.subheader("üíæ ÁµêÊûú„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ")
    
    # Ë©≥Á¥∞ÁµêÊûúCSVÔºàÊÑüÊÉÖÂà§ÂÆö„É©„Éô„É´„ÇíÂê´„ÇÄÔºâ
    download_df = results_df.copy()
    download_df = download_df[["text_sample", "sentiment_label", "compound", "positive", "negative", "neutral", "revenue"]]
    download_df.columns = ["Âè∞Êú¨„Éá„Éº„ÇøÔºàÊäúÁ≤ãÔºâ", "ÊÑüÊÉÖÂà§ÂÆö", "Á∑èÂêà„Çπ„Ç≥„Ç¢", "„Éù„Ç∏„ÉÜ„Ç£„Éñ„Çπ„Ç≥„Ç¢", "„Éç„Ç¨„ÉÜ„Ç£„Éñ„Çπ„Ç≥„Ç¢", "‰∏≠ÊÄß„Çπ„Ç≥„Ç¢", "ÂèéÁõä"]
    
    detailed_csv = download_df.to_csv(index=False, encoding="utf-8-sig")
    st.download_button(
        label="üìÅ Ë©≥Á¥∞ÂàÜÊûêÁµêÊûú„ÇíCSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
        data=detailed_csv,
        file_name="sentiment_analysis_detailed_with_labels.csv",
        mime="text/csv"
    )
    
    # ÊÑüÊÉÖÂà§ÂÆö‰∏ÄË¶ßCSV
    sentiment_list_csv = display_df.to_csv(index=False, encoding="utf-8-sig")
    st.download_button(
        label="üìã ÊÑüÊÉÖÂà§ÂÆö‰∏ÄË¶ß„ÇíCSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
        data=sentiment_list_csv,
        file_name="sentiment_judgment_list.csv",
        mime="text/csv"
    )
    
    # Áõ∏Èñ¢ÁµêÊûúCSV
    correlation_csv = corr_df.to_csv(index=False, encoding="utf-8-sig")
    st.download_button(
        label="üìä Áõ∏Èñ¢ÂàÜÊûêÁµêÊûú„ÇíCSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ", 
        data=correlation_csv,
        file_name="sentiment_correlation_free.csv",
        mime="text/csv"
    )

# ‰ΩøÁî®ÊñπÊ≥ïË™¨Êòé
with st.expander("‚ÑπÔ∏è ‰ΩøÁî®ÊñπÊ≥ï„Å®„Éí„É≥„Éà"):
    st.markdown("""
    ### üéØ Ê©üËÉΩÊ¶ÇË¶Å
    - **ÊÑüÊÉÖÂàÜÊûê**: oseti„É©„Ç§„Éñ„É©„É™„Å´„Çà„ÇãÊó•Êú¨Ë™ûÊÑüÊÉÖÂàÜÊûêÔºàÂÆåÂÖ®ÁÑ°ÊñôÔºâ
    - **Áõ∏Èñ¢ÂàÜÊûê**: ÊÑüÊÉÖ„Çπ„Ç≥„Ç¢„Å®ÂèéÁõä„ÅÆÁõ∏Èñ¢Èñ¢‰øÇ„ÇíÁµ±Ë®àÁöÑ„Å´Ê§úË®º
    - **ÂèØË¶ñÂåñ**: Áõ∏Èñ¢Èñ¢‰øÇ„ÄÅÊÑüÊÉÖÂàÜÂ∏É„ÄÅ„Éí„Éº„Éà„Éû„ÉÉ„Éó„ÇíË°®Á§∫
    - **„Ç®„ÇØ„Çπ„Éù„Éº„Éà**: ÂàÜÊûêÁµêÊûú„ÇíCSVÂΩ¢Âºè„Åß„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂèØËÉΩ
    
    ### üíñ oseti„É©„Ç§„Éñ„É©„É™„Å´„Å§„ÅÑ„Å¶
    - Êó•Êú¨Ë™ûÂ∞ÇÁî®„ÅÆÊÑüÊÉÖÂàÜÊûê„É©„Ç§„Éñ„É©„É™
    - API„Ç≠„Éº‰∏çË¶Å„ÄÅÂÆåÂÖ®ÁÑ°Êñô„ÅßÂà©Áî®ÂèØËÉΩ
    - -1Ôºà„Éç„Ç¨„ÉÜ„Ç£„ÉñÔºâ„Åã„Çâ1Ôºà„Éù„Ç∏„ÉÜ„Ç£„ÉñÔºâ„ÅÆ„Çπ„Ç≥„Ç¢„ÇíÂá∫Âäõ
    - ËæûÊõ∏„Éô„Éº„Çπ„ÅÆÊÑüÊÉÖÂàÜÊûêÊâãÊ≥ï
    
    ### ‚öôÔ∏è Ë®≠ÂÆö„ÅÆ„Éí„É≥„Éà
    - **Âü∫Êú¨ÂâçÂá¶ÁêÜ**: ËªΩÂæÆ„Å™„ÇØ„É™„Éº„Éã„É≥„Ç∞„ÅÆ„Åø
    - **Ë©≥Á¥∞ÂâçÂá¶ÁêÜ**: URL„ÄÅË®òÂè∑„ÄÅÊï∞Â≠ó„ÇíÈô§Âéª„Åó„Å¶„Çà„ÇäÁ≤æÂØÜ„Å´ÂàÜÊûê
    - **ÊúÄÂ§ßÂàÜÊûê‰ª∂Êï∞**: Âá¶ÁêÜÈÄüÂ∫¶„ÇíËÄÉÊÖÆ„Åó„Å¶Ë™øÊï¥Ôºàoseti„ÅØÈ´òÈÄüÔºâ
    
    ### üìä ÁµêÊûú„ÅÆËß£Èáà
    - **positive**: „Éù„Ç∏„ÉÜ„Ç£„ÉñÊÑüÊÉÖ„ÅÆÂº∑„ÅïÔºà0-1Ôºâ
    - **negative**: „Éç„Ç¨„ÉÜ„Ç£„ÉñÊÑüÊÉÖ„ÅÆÂº∑„ÅïÔºà0-1Ôºâ
    - **neutral**: ‰∏≠ÊÄßÁöÑÊÑüÊÉÖ„ÅÆÂº∑„ÅïÔºà0-1Ôºâ
    - **compound**: Á∑èÂêàÊÑüÊÉÖ„Çπ„Ç≥„Ç¢Ôºà-1„Åã„Çâ1Ôºâ
    - **Áµ±Ë®àÁöÑÊúâÊÑèÊÄß**: pÂÄ§ < 0.05 „ÅßÁõ∏Èñ¢„ÅåÁµ±Ë®àÁöÑ„Å´ÊÑèÂë≥„ÅÇ„Çä
    
    ### üÜö LLMÁâà„Å®„ÅÆÊØîËºÉ
    - **LLMÁâà**: „Çà„ÇäË§áÈõë„Å™ÊÑüÊÉÖÂàÜÊûê„ÄÅAPIÊñôÈáë„ÅåÁô∫Áîü
    - **ÁÑ°ÊñôÁâà**: È´òÈÄüÂá¶ÁêÜ„ÄÅAPIÊñôÈáë„Å™„Åó„ÄÅÂü∫Êú¨ÁöÑ„Å™ÊÑüÊÉÖÂàÜÊûê
    """)

st.markdown("---")
st.caption("üíñ oseti „É©„Ç§„Éñ„É©„É™„Å´„Çà„ÇãÊÑüÊÉÖÂàÜÊûê | üìä Âè∞Êú¨„Éá„Éº„ÇøÂàÜÊûê„Éè„Éñ")